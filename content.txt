/*
Assuming the following information is true for the purposes of this question:

18 May 2007 was a Tuesday
Thirty days has September, April, June and November. All the rest have thirty-one, saving February alone, which has twenty-eight, rain or shine. And on leap years, twenty-nine.
A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
Using the above information, how many Mondays fell on the twelfth (12th) of the month between 1 Jan 1401 to 31 Dec 1800?

You must complete the solution by creating a function in C called howManyDays. This should return the answer as an integer and does not have any input parameters. You may create and use additional functions in your solution. Your solution must return an answer within 3 seconds.  Only the following headers are available for you to use:

stdio.h
stdlib.h
ctype.h
string.h
stdbool.h
math.h
*/

/*
January has 31 days
February has 28 days and 29 days in leap years. 
A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
March has 31 days
April has 30 days
May has 31 days
June has 30 days
July has 31 days
August has 31 days
September has 30 days
October has 31 days
November has 30 days
December has 31 days
*/

/*17 May 2007 was a Monday, leap year has 366 days, normal year has 365 days.
1.We need to find out the leap years between 1401 and 1800.
2.Calculate all the days between 1 January 1401 and 17 May 2007. Get the correct day of 1 January 1401.
3.Find out the first Monday in 1401. 
4.Find out the correct date of all Monday between 1401 and 1800.
3.Find out date which is 12th in these days.
4.Count on the number.
*/


#include <stdio.h>

int is_leap_year(int year) { 
    // find out leap year
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
}
int howManyDays() {
    //Calculate all the days between 1 January 1401 and 17 May 2007.
    int total_days = 0;
    for (int year = 1401; year <= 1800; year++) {
        if (is_leap_year(year)) {
            total_days += 366;
        } else {
            total_days += 365;
        }
    }
    
    //Get the correct day of 1 January 1401.
    int day_of_week = total_days % 7;
    int weekday;
    if (day_of_week == 0) weekday = 1; // Monday
    else if (day_of_week == 1) weekday = 2; // Tuesday
    else if (day_of_week == 2) weekday = 3; // Wednesday
    else if (day_of_week == 3) weekday = 4; // Thursday
    else if (day_of_week == 4) weekday = 5; // Friday
    else if (day_of_week == 5) weekday = 6; // Saturday
    else if (day_of_week == 6) weekday = 7; // Sunday
    
    // Find out the first Monday in 1401.
    int days_until_monday;
    if (weekday == 1) {
        days_until_monday = 0;
    } else {
        days_until_monday = (7 - weekday + 1);
    }
    
    //Find out the correct date of all Monday between 1401 and 1800.
    int day = 1 + days_until_monday;
    int month = 1;
    int year = 1401;
    int count = 0;

    int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    while (year < 1801) {
        int days_this_month = days_in_month[month - 1];
        if (month == 2 && is_leap_year(year)) {
            days_this_month = 29; // check leap year
        }

        if (day > days_this_month) { // check cross month
            day -= days_this_month;
            month++;
            if (month > 12) { //check cross year
                month = 1;
                year++;
            }
        continue;
        }

        // Find out date which is 12th in these days.
        if (day == 12) {
            count++;
        }
        day += 7;
    }
    return count;
    return howManyDays();
}
